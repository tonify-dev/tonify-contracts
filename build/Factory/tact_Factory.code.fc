#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Factory.headers.fc";
#include "tact_Factory.stdlib.fc";
#include "tact_Factory.constants.fc";
#include "tact_Factory.storage.fc";

;;
;; Contract Factory functions
;;

(int) $Factory$_contract_init(int $id) impure inline_ref {
    var (($self'id)) = (null());
    $self'id = $id;
    return ($self'id);
}

((int), int) $Factory$_fun_id((int) $self) impure inline_ref {
    var (($self'id)) = $self;
    return (($self'id), $self'id);
}

;;
;; Receivers of a Contract Factory
;;

(((int)), ()) $Factory$_internal_binary_DeployTokenMarket((int) $self, (int, int, slice, slice, slice, slice, int, cell, int, int, slice, int, int, slice, slice) $msg) impure inline {
    var ($self'id) = $self;
    var ($msg'queryId, $msg'id, $msg'owner, $msg'coin, $msg'jettonWallet, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress, $msg'originalGasTo) = $msg;
    raw_reserve(100000000, 0);
    var ($winit'code, $winit'data) = $Market$_init_child(__tact_context_sys, $msg'id, $msg'owner, $msg'coin, __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), my_address(), $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress);
    $global_emit($MarketDeployedEvent$_store_cell($MarketDeployedEvent$_constructor_queryId_marketAddress_id_owner_coin_jettonWallet_underlyingAssetName_duration_collection_content_operatorFee_serviceFee_oracle_feedIdAsset_feedIdToken_operatorFeeAddress($msg'queryId, $global_contractAddress(($winit'code, $winit'data)), $msg'id, $msg'owner, $msg'coin, $msg'jettonWallet, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($winit'code, $winit'data)), 0, 128, true, $InnerDeployMarket$_store_cell($InnerDeployMarket$_constructor_queryId_jettonWallet_originalGasTo($msg'queryId, $msg'jettonWallet, $msg'originalGasTo)), $winit'code, $winit'data));
    return (($self'id), ());
}

(((int)), ()) $Factory$_internal_binary_DeployTokenMarketWithAmm((int) $self, (int, int, slice, slice, slice, slice, slice, int, cell, int, int, slice, int, int, slice, slice) $msg) impure inline {
    var ($self'id) = $self;
    var ($msg'queryId, $msg'id, $msg'owner, $msg'coin, $msg'jettonWallet, $msg'jettonWalletAmm, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress, $msg'originalGasTo) = $msg;
    var ($ammWinit'code, $ammWinit'data) = $Amm$_init_child(__tact_context_sys, $msg'id, my_address(), $msg'owner);
    raw_reserve(100000000, 0);
    var ($winit'code, $winit'data) = $Market$_init_child(__tact_context_sys, $msg'id, $msg'owner, $msg'coin, $global_contractAddress(($ammWinit'code, $ammWinit'data)), my_address(), $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress);
    $global_emit($MarketDeployedEventWithAmm$_store_cell($MarketDeployedEventWithAmm$_constructor_queryId_marketAddress_id_owner_coin_amm_jettonWallet_jettonWalletAmm_underlyingAssetName_duration_collection_content_operatorFee_serviceFee_oracle_feedIdAsset_feedIdToken_operatorFeeAddress($msg'queryId, $global_contractAddress(($winit'code, $winit'data)), $msg'id, $msg'owner, $msg'coin, $global_contractAddress(($ammWinit'code, $ammWinit'data)), $msg'jettonWallet, $msg'jettonWalletAmm, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($ammWinit'code, $ammWinit'data)), 200000000, 0, false, $InnerDeployAmm$_store_cell($InnerDeployAmm$_constructor_queryId_jettonWallet_market_originalGasTo($msg'queryId, $msg'jettonWalletAmm, $global_contractAddress(($winit'code, $winit'data)), $msg'originalGasTo)), $ammWinit'code, $ammWinit'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($winit'code, $winit'data)), 0, 128, true, $InnerDeployMarket$_store_cell($InnerDeployMarket$_constructor_queryId_jettonWallet_originalGasTo($msg'queryId, $msg'jettonWallet, $msg'originalGasTo)), $winit'code, $winit'data));
    return (($self'id), ());
}

(((int)), ()) $Factory$_internal_binary_DeployTonMarket((int) $self, (int, int, slice, slice, int, cell, int, int, slice, int, int, slice, slice) $msg) impure inline {
    var ($self'id) = $self;
    var ($msg'queryId, $msg'id, $msg'owner, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress, $msg'originalGasTo) = $msg;
    raw_reserve(100000000, 0);
    var ($winit'code, $winit'data) = $MarketTon$_init_child(__tact_context_sys, $msg'id, $msg'owner, __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), my_address(), $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress);
    $global_emit($MarketTonDeployedEvent$_store_cell($MarketTonDeployedEvent$_constructor_queryId_marketAddress_id_owner_underlyingAssetName_duration_collection_content_operatorFee_serviceFee_oracle_feedIdAsset_feedIdToken_operatorFeeAddress($msg'queryId, $global_contractAddress(($winit'code, $winit'data)), $msg'id, $msg'owner, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($winit'code, $winit'data)), 0, 128, true, $InnerDeployMarketTon$_store_cell($InnerDeployMarketTon$_constructor_queryId_originalGasTo($msg'queryId, $msg'originalGasTo)), $winit'code, $winit'data));
    return (($self'id), ());
}

(((int)), ()) $Factory$_internal_binary_DeployTonMarketWithAmm((int) $self, (int, int, slice, slice, int, cell, int, int, slice, int, int, slice, slice) $msg) impure inline {
    var ($self'id) = $self;
    var ($msg'queryId, $msg'id, $msg'owner, $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress, $msg'originalGasTo) = $msg;
    var ($ammWinit'code, $ammWinit'data) = $AmmTon$_init_child(__tact_context_sys, $msg'id, my_address(), $msg'owner);
    raw_reserve(100000000, 0);
    var ($winit'code, $winit'data) = $MarketTon$_init_child(__tact_context_sys, $msg'id, $msg'owner, $global_contractAddress(($ammWinit'code, $ammWinit'data)), my_address(), $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress);
    $global_emit($MarketTonDeployedEventWithAmm$_store_cell($MarketTonDeployedEventWithAmm$_constructor_queryId_marketAddress_id_owner_amm_underlyingAssetName_duration_collection_content_operatorFee_serviceFee_oracle_feedIdAsset_feedIdToken_operatorFeeAddress($msg'queryId, $global_contractAddress(($winit'code, $winit'data)), $msg'id, $msg'owner, $global_contractAddress(($ammWinit'code, $ammWinit'data)), $msg'underlyingAssetName, $msg'duration, $msg'collection_content, $msg'operatorFee, $msg'serviceFee, $msg'oracle, $msg'feedIdAsset, $msg'feedIdToken, $msg'operatorFeeAddress)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($ammWinit'code, $ammWinit'data)), 200000000, 0, false, $InnerDeployAmmTon$_store_cell($InnerDeployAmmTon$_constructor_queryId_market_originalGasTo($msg'queryId, $global_contractAddress(($winit'code, $winit'data)), $msg'originalGasTo)), $ammWinit'code, $ammWinit'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($winit'code, $winit'data)), 0, 128, true, $InnerDeployMarketTon$_store_cell($InnerDeployMarketTon$_constructor_queryId_originalGasTo($msg'queryId, $msg'originalGasTo)), $winit'code, $winit'data));
    return (($self'id), ());
}

(((int)), ()) $Factory$_internal_binary_Deploy((int) $self, (int) $deploy) impure inline {
    var ($self'id) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id)~$Factory$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id), ());
}

;;
;; Get methods of a Contract Factory
;;

_ %id() method_id(105872) {
    var self = $Factory$_contract_load();
    var res = self~$Factory$_fun_id();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Factory
;;

((int), int) $Factory$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive DeployTokenMarket message
    if (op == 3133287539) {
        var msg = in_msg~$DeployTokenMarket$_load();
        self~$Factory$_internal_binary_DeployTokenMarket(msg);
        return (self, true);
    }
    
    ;; Receive DeployTokenMarketWithAmm message
    if (op == 1684562987) {
        var msg = in_msg~$DeployTokenMarketWithAmm$_load();
        self~$Factory$_internal_binary_DeployTokenMarketWithAmm(msg);
        return (self, true);
    }
    
    ;; Receive DeployTonMarket message
    if (op == 4267639384) {
        var msg = in_msg~$DeployTonMarket$_load();
        self~$Factory$_internal_binary_DeployTonMarket(msg);
        return (self, true);
    }
    
    ;; Receive DeployTonMarketWithAmm message
    if (op == 2976600156) {
        var msg = in_msg~$DeployTonMarketWithAmm$_load();
        self~$Factory$_internal_binary_DeployTonMarketWithAmm(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Factory$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Factory$_contract_load();
    
    ;; Handle operation
    int handled = self~$Factory$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Factory$_contract_store(self);
}
