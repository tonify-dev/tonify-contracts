#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Amm.headers.fc";
#include "tact_Amm.stdlib.fc";
#include "tact_Amm.constants.fc";
#include "tact_Amm.storage.fc";

;;
;; Contract Amm functions
;;

(int, slice, slice, slice, slice) $Amm$_contract_init(int $id, slice $factory, slice $owner) impure inline_ref {
    var (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)) = (null(), null(), null(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c());
    $self'id = $id;
    $self'factory = $factory;
    $self'owner = $owner;
    return ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet);
}

((int, slice, slice, slice, slice), int) $Amm$_fun_id((int, slice, slice, slice, slice) $self) impure inline_ref {
    var (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)) = $self;
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), $self'id);
}

((int, slice, slice, slice, slice), slice) $Amm$_fun_market((int, slice, slice, slice, slice) $self) impure inline_ref {
    var (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)) = $self;
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), $self'market);
}

((int, slice, slice, slice, slice), int) $Amm$_fun_balance((int, slice, slice, slice, slice) $self) impure inline_ref {
    var (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)) = $self;
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), __tact_my_balance());
}

((int, slice, slice, slice, slice), ()) $Amm$_fun_requireOwner((int, slice, slice, slice, slice) $self) impure inline_ref {
    var (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), ());
}

((int, slice, slice, slice, slice), slice) $Amm$_fun_owner((int, slice, slice, slice, slice) $self) impure inline_ref {
    var (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)) = $self;
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), $self'owner);
}

;;
;; Receivers of a Contract Amm
;;

(((int, slice, slice, slice, slice)), ()) $Amm$_internal_binary_InnerDeployAmm((int, slice, slice, slice, slice) $self, (int, slice, slice, slice) $msg) impure inline {
    var ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet) = $self;
    var ($msg'queryId, $msg'jettonWallet, $msg'originalGasTo, $msg'market) = $msg;
    throw_unless(40828, ( __tact_slice_eq_bits($self'factory, __tact_context_get_sender()) ));
    raw_reserve(100000000, 0);
    throw_unless(29863, ( __tact_slice_eq_bits(__gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), $self'market) ));
    throw_unless(49291, ( __tact_slice_eq_bits(__gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), $self'jettonWallet) ));
    $self'jettonWallet = $msg'jettonWallet;
    $self'market = $msg'market;
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'originalGasTo, 0, 128, false, $DeployOk$_store_cell($DeployOk$_constructor_queryId($msg'queryId))));
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), ());
}

(((int, slice, slice, slice, slice)), ()) $Amm$_internal_binary_TakeDealAmm((int, slice, slice, slice, slice) $self, (int, int, int, slice, cell, cell) $msg) impure inline {
    var ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet) = $self;
    var ($msg'queryId, $msg'dealId, $msg'amount, $msg'originalGasTo, $msg'oracleAssetData, $msg'oracleTokenData) = $msg;
    raw_reserve(100000000, 0);
    throw_unless(24843, ( __tact_slice_eq_bits($self'market, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'jettonWallet, 0, 128, true, $TokenTransfer$_store_cell($TokenTransfer$_constructor_amount_recipient_query_id_response_destination_custom_payload_forward_ton_amount_forward_payload($msg'amount, __tact_context_get_sender(), $msg'queryId, $msg'originalGasTo, null(), 300000000, begin_parse($TakeDealWithOriginalGasTo$_store_cell($TakeDealWithOriginalGasTo$_constructor_data($TakeDealDataWithOriginalGasTo$_store_cell($TakeDealDataWithOriginalGasTo$_constructor_dealId_oracleAssetData_oracleTokenData_originalGasTo($msg'dealId, $msg'oracleAssetData, $msg'oracleTokenData, $msg'originalGasTo)))))))));
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), ());
}

(((int, slice, slice, slice, slice)), ()) $Amm$_internal_binary_WithdrawToken((int, slice, slice, slice, slice) $self, (int, int, slice) $msg) impure inline {
    var ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet) = $self;
    var ($msg'queryId, $msg'amount, $msg'originalGasTo) = $msg;
    ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)~$Amm$_fun_requireOwner();
    raw_reserve(100000000, 0);
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'jettonWallet, 0, 128, true, $TokenTransfer$_store_cell($TokenTransfer$_constructor_amount_recipient_query_id_response_destination_custom_payload_forward_ton_amount_forward_payload($msg'amount, __tact_context_get_sender(), $msg'queryId, $msg'originalGasTo, null(), 0, $global_emptySlice()))));
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), ());
}

(((int, slice, slice, slice, slice)), ()) $Amm$_internal_binary_ChangeOwner((int, slice, slice, slice, slice) $self, (int, slice) $msg) impure inline {
    var ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet) = $self;
    var ($msg'queryId, $msg'newOwner) = $msg;
    ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)~$Amm$_fun_requireOwner();
    $self'owner = $msg'newOwner;
    ($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet)~$Amm$_fun_reply($ChangeOwnerOk$_store_cell($ChangeOwnerOk$_constructor_queryId_newOwner($msg'queryId, $msg'newOwner)));
    return (($self'id, $self'factory, $self'owner, $self'market, $self'jettonWallet), ());
}

;;
;; Get methods of a Contract Amm
;;

_ %id() method_id(105872) {
    var self = $Amm$_contract_load();
    var res = self~$Amm$_fun_id();
    return res;
}

_ %market() method_id(109725) {
    var self = $Amm$_contract_load();
    var res = self~$Amm$_fun_market();
    return res;
}

_ %balance() method_id(104128) {
    var self = $Amm$_contract_load();
    var res = self~$Amm$_fun_balance();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Amm$_contract_load();
    var res = self~$Amm$_fun_owner();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Amm
;;

((int, slice, slice, slice, slice), int) $Amm$_contract_router_internal((int, slice, slice, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InnerDeployAmm message
    if (op == 2078977111) {
        var msg = in_msg~$InnerDeployAmm$_load();
        self~$Amm$_internal_binary_InnerDeployAmm(msg);
        return (self, true);
    }
    
    ;; Receive TakeDealAmm message
    if (op == 1895074275) {
        var msg = in_msg~$TakeDealAmm$_load();
        self~$Amm$_internal_binary_TakeDealAmm(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawToken message
    if (op == 1740151130) {
        var msg = in_msg~$WithdrawToken$_load();
        self~$Amm$_internal_binary_WithdrawToken(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 2174598809) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$Amm$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Amm$_contract_load();
    
    ;; Handle operation
    int handled = self~$Amm$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Amm$_contract_store(self);
}
